generator client {
  provider      = "prisma-client-js"
  output        = "../src/generated/prisma"
  binaryTargets = ["native", "windows", "rhel-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  role      Role
  name      String
  email     String   @unique
  password  String   // Note: Hash this in application logic
  phone     String
  status    UserStatus   @default(active)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime? // Soft delete

  Doctor         Doctor?
  Nurse          Nurse?
  LabTechnician  LabTechnician?
  Pharmacist     Pharmacist?
  FinanceStaff   FinanceStaff?
  Receptionist   Receptionist?
  Patient        Patient?
}

model Patient {
  id           String   @id @map("userId")
  user         User     @relation(fields: [id], references: [id], onDelete: Cascade)
  gender       Gender
  birthDate    DateTime
  address      String
  nationalId   String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  deletedAt    DateTime?

  appointments     Appointment[]
  triages          Triage[]
  prescriptions    Prescription[]
  labRequests      LabRequest[]
  medicationBills  MedicationBill[]
  labTestBills     LabTestBill[]
  dispenses        Dispense[]
  medicalRecords   MedicalRecord[]
  visits           Visit[]
  insuranceClaims  InsuranceClaim[]
}

model Doctor {
  id             String   @id @map("userId")
  user           User     @relation(fields: [id], references: [id], onDelete: Cascade)
  specialization String
  officeNumber   String
  department     String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  deletedAt      DateTime?

  availability   DoctorAvailability[]
  appointments   Appointment[]
  prescriptions  Prescription[]
  labRequests    LabRequest[]
}

model Nurse {
  id           String   @id @map("userId")
  user         User     @relation(fields: [id], references: [id], onDelete: Cascade)
  officeNumber String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  deletedAt    DateTime?

  triages      Triage[]
}

model LabTechnician {
  id           String   @id @map("userId")
  user         User     @relation(fields: [id], references: [id], onDelete: Cascade)
  labSection   String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  deletedAt    DateTime?

  labResults   LabResult[]
}

model Pharmacist {
  id           String   @id @map("userId")
  user         User     @relation(fields: [id], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  deletedAt    DateTime?

  dispenses    Dispense[]
}

model FinanceStaff {
  id               String   @id @map("userId")
  user             User     @relation(fields: [id], references: [id], onDelete: Cascade)
  officeNumber     String
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  deletedAt        DateTime?

  appointmentBills AppointmentBill[]
  medicationBills  MedicationBill[]
  labTestBills     LabTestBill[]
  insuranceClaims  InsuranceClaim[]
}

model Receptionist {
  id           String   @id @map("userId")
  user         User     @relation(fields: [id], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  deletedAt    DateTime?

  visits       Visit[]
}

model DoctorAvailability {
  id        String   @id @default(uuid())
  doctorId  String
  day       Weekday
  startTime String
  endTime   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?

  doctor    Doctor   @relation(fields: [doctorId], references: [id], onDelete: Cascade)

  @@unique([doctorId, day, startTime, endTime])
}

model Appointment {
  id              String   @id @default(uuid())
  patientId       String
  doctorId        String
  status          AppointmentStatus @default(pending)
  reason          String
  dateTime        DateTime
  triageId        String?
  rescheduledFrom String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  visitId         String?   @unique
  deletedAt       DateTime?

  patient         Patient  @relation(fields: [patientId], references: [id], onDelete: Cascade)
  doctor          Doctor   @relation(fields: [doctorId], references: [id], onDelete: Cascade)
  appointmentBill AppointmentBill?
  triage          Triage?
  visit           Visit?   @relation(fields: [visitId], references: [id])

  @@index([status])
  @@index([dateTime])
}

model AppointmentBill {
  id             String   @id @default(uuid())
  appointmentId  String   @unique
  amount         Decimal
  status         PaymentApprovalStatus   @default(pending)
  financeStaffId String
  approvedAt     DateTime?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  deletedAt      DateTime?

  appointment    Appointment  @relation(fields: [appointmentId], references: [id], onDelete: Cascade)
  financeStaff   FinanceStaff @relation(fields: [financeStaffId], references: [id], onDelete: Cascade)
}

model Triage {
  id            String   @id @default(uuid())
  patientId     String
  appointmentId String   @unique
  nurseId       String
  symptoms      Json
  vitals        Json
  notes         String
  timestamp     DateTime
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  deletedAt     DateTime?
  
  medicalRecord MedicalRecord?
  patient       Patient     @relation(fields: [patientId], references: [id], onDelete: Cascade)
  appointment   Appointment @relation(fields: [appointmentId], references: [id], onDelete: Cascade)
  nurse         Nurse       @relation(fields: [nurseId], references: [id], onDelete: Cascade)
}

model Prescription {
  id             String   @id @default(uuid())
  doctorId       String
  patientId      String
  labResultId    String?  @unique
  dispenseStatus DispenseStatus @default(pending)
  medications    Json
  notes          String
  prescribedAt   DateTime @default(now())
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  deletedAt      DateTime?

  medicalRecord  MedicalRecord?
  doctor         Doctor      @relation(fields: [doctorId], references: [id], onDelete: Cascade)
  patient        Patient     @relation(fields: [patientId], references: [id], onDelete: Cascade)
  labResult      LabResult?  @relation(fields: [labResultId], references: [id])
  medicationBill MedicationBill?
  dispense       Dispense?
}

model LabRequest {
  id             String   @id @default(uuid())
  doctorId       String
  patientId      String
  status         LabRequestStatus   @default(requested)
  notes          String
  priority       LabRequestPriority
  tests          Json
  requestedAt    DateTime @default(now())
  completedAt    DateTime?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  deletedAt      DateTime?

  doctor         Doctor      @relation(fields: [doctorId], references: [id], onDelete: Cascade)
  patient        Patient     @relation(fields: [patientId], references: [id], onDelete: Cascade)
  labResult      LabResult?
  labTestBill    LabTestBill?
}

model LabResult {
  id              String   @id @default(uuid())
  labRequestId    String   @unique
  labTechnicianId String
  result          Json
  notes           String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  deletedAt       DateTime?
  
  medicalRecord   MedicalRecord?
  labRequest      LabRequest    @relation(fields: [labRequestId], references: [id], onDelete: Cascade)
  labTechnician   LabTechnician @relation(fields: [labTechnicianId], references: [id], onDelete: Cascade)
  prescription    Prescription?
}

model MedicationBill {
  id             String   @id @default(uuid())
  patientId      String
  prescriptionId String   @unique
  financeStaffId String
  medications    Json
  totalAmount    Decimal
  status         PaymentApprovalStatus @default(pending)
  paidAt         DateTime?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  deletedAt      DateTime?

  patient        Patient       @relation(fields: [patientId], references: [id], onDelete: Cascade)
  prescription   Prescription  @relation(fields: [prescriptionId], references: [id], onDelete: Cascade)
  financeStaff   FinanceStaff  @relation(fields: [financeStaffId], references: [id], onDelete: Cascade)
}

model LabTestBill {
  id             String   @id @default(uuid())
  patientId      String
  labRequestId   String   @unique
  financeStaffId String
  tests          Json
  totalAmount    Decimal
  status         PaymentApprovalStatus   @default(pending)
  paidAt         DateTime?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  deletedAt      DateTime?

  patient        Patient       @relation(fields: [patientId], references: [id], onDelete: Cascade)
  labRequest     LabRequest    @relation(fields: [labRequestId], references: [id], onDelete: Cascade)
  financeStaff   FinanceStaff  @relation(fields: [financeStaffId], references: [id], onDelete: Cascade)
}

model InsuranceClaim {
  id             String   @id @default(uuid())
  patientId      String
  financeStaffId String
  insuranceType  String
  claimDetails   Json
  claimStatus    InsuranceClaimStatus @default(pending)
  submittedAt    DateTime @default(now())
  processedAt    DateTime?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  deletedAt      DateTime?

  patient        Patient      @relation(fields: [patientId], references: [id], onDelete: Cascade)
  financeStaff   FinanceStaff @relation(fields: [financeStaffId], references: [id], onDelete: Cascade)
}

model MedicalRecord {
  id             String   @id @default(uuid())
  patientId      String
  visitId        String?  @unique
  triageId       String?  @unique
  prescriptionId String?  @unique
  labResultId    String?  @unique
  diagnoses      String?
  notes          String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  deletedAt      DateTime?

  patient        Patient       @relation(fields: [patientId], references: [id], onDelete: Cascade)
  visit          Visit?        @relation(fields: [visitId], references: [id])
  prescription   Prescription? @relation(fields: [prescriptionId], references: [id])
  labResult      LabResult?    @relation(fields: [labResultId], references: [id])
  triage         Triage?       @relation(fields: [triageId], references: [id])
}

model Dispense {
  id             String   @id @default(uuid())
  prescriptionId String   @unique
  pharmacistId   String
  patientId      String
  dispensedAt    DateTime @default(now())
  medications    Json
  notes          String
  status         DispenseStatus    @default(pending)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  deletedAt      DateTime?

  prescription   Prescription @relation(fields: [prescriptionId], references: [id], onDelete: Cascade)
  pharmacist     Pharmacist   @relation(fields: [pharmacistId], references: [id], onDelete: Cascade)
  patient        Patient      @relation(fields: [patientId], references: [id], onDelete: Cascade)
}

model Visit {
  id             String   @id @default(uuid())
  patientId      String
  receptionistId String
  reason         String
  visitDateTime  DateTime @default(now())
  status         VisitStatus @default(queued)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  deletedAt      DateTime?

  medicalRecord  MedicalRecord?
  patient        Patient      @relation(fields: [patientId], references: [id], onDelete: Cascade)
  receptionist   Receptionist @relation(fields: [receptionistId], references: [id], onDelete: Cascade)
  appointment    Appointment?

  @@index([status])
  @@index([visitDateTime])
}

enum Role {
  receptionist
  nurse
  doctor
  lab_technician
  pharmacist
  finance
  patient
  admin
}

enum Weekday {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

enum AppointmentStatus {
  pending
  confirmed
  cancelled
  completed
  rescheduled
  expired
}

enum LabRequestStatus {
  requested
  completed
}

enum PaymentApprovalStatus {
  pending
  approved
  rejected
}

enum LabRequestPriority {
  urgent
  routine
}

enum UserStatus {
  active
  suspend
}

enum DispenseStatus {
  dispensed
  pending
}

enum Gender {
  male
  female
  other
}

enum VisitStatus {
  queued
  completed
  cancelled
}

enum InsuranceClaimStatus {
  pending
  approved
  rejected
}